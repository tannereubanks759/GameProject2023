#T#Emission0Properties
//TODO Add inverts to the masks
//Emission 1
[HideInInspector] m_start_emissionOptions ("Emission / Glow--{reference_property:_EnableEmission}", Float) = 0
[HideInInspector][ThryToggle(_EMISSION)]_EnableEmission ("Enable Emission", Float) = 0
[ToggleUI]_EmissionReplace ("Replace Base Color", Float) = 0
[HDR]_EmissionColor ("Emission Color", Color) = (1, 1, 1, 1)
[Gradient]_EmissionMap ("Emission Map--{reference_properties:[_EmissionMapPan, _EmissionMapUV]}", 2D) = "white" { }
[HideInInspector][Vector2]_EmissionMapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, Wolrd Pos XZ, 5, Polar UV, 6, Distorted UV, 7 )] _EmissionMapUV ("UV", Int) = 0
[ToggleUI]_EmissionBaseColorAsMap ("Base Color as Map?", Float) = 0
_EmissionMask ("Emission Mask--{reference_properties:[_EmissionMaskPan, _EmissionMaskUV]}", 2D) = "white" { }
[HideInInspector][Vector2]_EmissionMaskPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, Wolrd Pos XZ, 5, Polar UV, 6, Distorted UV, 7 )] _EmissionMaskUV ("UV", Int) = 0
_EmissionStrength ("Emission Strength", Range(0, 20)) = 0

[Space(10)]
[ThryToggleUI(true)]_EmissionHueShiftEnabled ("<size=13><b>  Hue Shift</b></size>", Float) = 0
_EmissionHueShift ("Hue Shift--{condition_showS:(_EmissionHueShiftEnabled==1)}", Range(0, 1)) = 0
_EmissionHueShiftSpeed ("Hue Shift Speed--{condition_showS:(_EmissionHueShiftEnabled==1)}", Float) = 0

// Center out emission
[Space(10)]
[ThryToggleUI(true)]_EmissionCenterOutEnabled ("<size=13><b>  Center Out</b></size>", Float) = 0
_EmissionCenterOutSpeed ("Flow Speed--{condition_showS:(_EmissionCenterOutEnabled==1)}", Float) = 5

// Glow in the dark Emission
[Space(10)]
[ThryToggleUI(true)]_EnableGITDEmission ("<size=13><b>  Light Based</b></size>", Float) = 0
[Enum(World, 0, Mesh, 1)] _GITDEWorldOrMesh ("Lighting Type--{condition_showS:(_EnableGITDEmission==1)}", Int) = 0
_GITDEMinEmissionMultiplier ("Min Emission Multiplier--{condition_showS:(_EnableGITDEmission==1)}", Range(0, 1)) = 1
_GITDEMaxEmissionMultiplier ("Max Emission Multiplier--{condition_showS:(_EnableGITDEmission==1)}", Range(0, 1)) = 0
_GITDEMinLight ("Min Lighting--{condition_showS:(_EnableGITDEmission==1)}", Range(0, 1)) = 0
_GITDEMaxLight ("Max Lighting--{condition_showS:(_EnableGITDEmission==1)}", Range(0, 1)) = 1

// Blinking Emission
[Space(10)]
[ThryToggleUI(true)]_EmissionBlinkingEnabled ("<size=13><b>  Blinking</b></size>", Float) = 0
_EmissiveBlink_Min ("Emissive Blink Min--{condition_showS:(_EmissionBlinkingEnabled==1)}", Float) = 0
_EmissiveBlink_Max ("Emissive Blink Max--{condition_showS:(_EmissionBlinkingEnabled==1)}", Float) = 1
_EmissiveBlink_Velocity ("Emissive Blink Velocity--{condition_showS:(_EmissionBlinkingEnabled==1)}", Float) = 4
_EmissionBlinkingOffset ("Offset--{condition_showS:(_EmissionBlinkingEnabled==1)}", Float) = 0

// Scrolling Emission
[Space(10)]
[ThryToggleUI(true)] _ScrollingEmission ("<size=13><b>  Scrolling</b></size>", Float) = 0
[ToggleUI]_EmissionScrollingUseCurve ("Use Curve--{condition_showS:(_ScrollingEmission==1)}", float) = 0
[Curve]_EmissionScrollingCurve ("Curve--{condition_showS:(_ScrollingEmission==1&&_EmissionScrollingUseCurve==1)}", 2D) = "white" { }
[ToggleUI]_EmissionScrollingVertexColor ("VColor as position--{condition_showS:(_ScrollingEmission==1)}", float) = 0
_EmissiveScroll_Direction ("Direction--{condition_showS:(_ScrollingEmission==1)}", Vector) = (0, -10, 0, 0)
_EmissiveScroll_Width ("Width--{condition_showS:(_ScrollingEmission==1)}", Float) = 10
_EmissiveScroll_Velocity ("Velocity--{condition_showS:(_ScrollingEmission==1)}", Float) = 10
_EmissiveScroll_Interval ("Interval--{condition_showS:(_ScrollingEmission==1)}", Float) = 20
_EmissionScrollingOffset ("Offset--{condition_showS:(_ScrollingEmission==1)}", Float) = 0

#K#POI_EMISSION0_PROPERTIES

[HideInInspector] m_end_emissionOptions ("", Float) = 0

// Second Emission
[HideInInspector] m_start_emission1Options ("Emission / Glow 2 (Requires Emission 1 Enabled)--{reference_property:_EnableEmission1}", Float) = 0
[HideInInspector][ThryToggle(EFFECT_HUE_VARIATION)]_EnableEmission1 ("Enable Emission 2", Float) = 0
[HDR]_EmissionColor1 ("Emission Color", Color) = (1, 1, 1, 1)
[Gradient]_EmissionMap1 ("Emission Map--{reference_properties:[_EmissionMap1Pan, _EmissionMap1UV]}", 2D) = "white" { }
[HideInInspector][Vector2]_EmissionMap1Pan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, Wolrd Pos XZ, 5, Polar UV, 6, Distorted UV, 7 )] _EmissionMap1UV ("UV", Int) = 0
[ToggleUI]_EmissionBaseColorAsMap1 ("Base Color as Map?", Float) = 0
_EmissionMask1 ("Emission Mask--{reference_properties:[_EmissionMask1Pan, _EmissionMask1UV]}", 2D) = "white" { }
[HideInInspector][Vector2]_EmissionMask1Pan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, Wolrd Pos XZ, 5, Polar UV, 6, Distorted UV, 7 )] _EmissionMask1UV ("UV", Int) = 0
_EmissionStrength1 ("Emission Strength", Range(0, 20)) = 0

[Space(10)]
[ThryToggleUI(true)]_EmissionHueShiftEnabled1 ("<size=13><b>  Hue Shift</b></size>", Float) = 0
_EmissionHueShift1 ("Hue Shift--{condition_showS:(_EmissionHueShiftEnabled1==1)}", Range(0, 1)) = 0
_EmissionHueShiftSpeed1 ("Hue Shift Speed--{condition_showS:(_EmissionHueShiftEnabled1==1)}", Float) = 0

// Second Center Out Enission
[Space(10)]
[HideInInspector][ToggleUI]_EmissionCenterOutEnabled1 ("<size=13><b>  Center Out</b></size>", Float) = 0
_EmissionCenterOutSpeed1 ("Flow Speed--{condition_showS:(_EmissionCenterOutEnabled1==1)}", Float) = 5

// Second Glow In The Dark Emission
[Space(10)]
[ThryToggleUI(true)]_EnableGITDEmission1 ("<size=13><b>  Light Based</b></size>", Float) = 0
[Enum(World, 0, Mesh, 1)] _GITDEWorldOrMesh1 ("Lighting Type--{condition_showS:(_EnableGITDEmission1==1)}", Int) = 0
_GITDEMinEmissionMultiplier1 ("Min Emission Multiplier--{condition_showS:(_EnableGITDEmission1==1)}", Range(0, 1)) = 1
_GITDEMaxEmissionMultiplier1 ("Max Emission Multiplier--{condition_showS:(_EnableGITDEmission1==1)}", Range(0, 1)) = 0
_GITDEMinLight1 ("Min Lighting--{condition_showS:(_EnableGITDEmission1==1)}", Range(0, 1)) = 0
_GITDEMaxLight1 ("Max Lighting--{condition_showS:(_EnableGITDEmission1==1)}", Range(0, 1)) = 1

// Second Blinking Emission
[Space(10)]
[ThryToggleUI(true)]_EmissionBlinkingEnabled1 ("<size=13><b>  Blinking</b></size>", Float) = 0
_EmissiveBlink_Min1 ("Emissive Blink Min--{condition_showS:(_EmissionBlinkingEnabled1==1)}", Float) = 0
_EmissiveBlink_Max1 ("Emissive Blink Max--{condition_showS:(_EmissionBlinkingEnabled1==1)}", Float) = 1
_EmissiveBlink_Velocity1 ("Emissive Blink Velocity--{condition_showS:(_EmissionBlinkingEnabled1==1)}", Float) = 4
_EmissionBlinkingOffset1 ("Offset--{condition_showS:(_EmissionBlinkingEnabled1==1)}", Float) = 0

// Scrolling Scrolling Emission
[Space(10)]
[ThryToggleUI(true)] _ScrollingEmission1 ("<size=13><b>  Scrolling</b></size>", Float) = 0
[ToggleUI]_EmissionScrollingUseCurve1 ("Use Curve--{condition_showS:(_ScrollingEmission1==1)}", float) = 0
[Curve]_EmissionScrollingCurve1 ("Curve--{condition_showS:(_ScrollingEmission1==1&&_EmissionScrollingUseCurve1==1)}", 2D) = "white" { }
[ToggleUI]_EmissionScrollingVertexColor1 ("VColor as position--{condition_showS:(_ScrollingEmission1==1)}", float) = 0
_EmissiveScroll_Direction1 ("Direction--{condition_showS:(_ScrollingEmission1==1)}", Vector) = (0, -10, 0, 0)
_EmissiveScroll_Width1 ("Width--{condition_showS:(_ScrollingEmission1==1)}", Float) = 10
_EmissiveScroll_Velocity1 ("Velocity--{condition_showS:(_ScrollingEmission1==1)}", Float) = 10
_EmissiveScroll_Interval1 ("Interval--{condition_showS:(_ScrollingEmission1==1)}", Float) = 20
_EmissionScrollingOffset1 ("Offset--{condition_showS:(_ScrollingEmission1==1)}", Float) = 0

#K#POI_EMISSION1_PROPERTIES

[HideInInspector] m_end_emission1Options ("", Float) = 0

#T#Emission0Keywords
#pragma shader_feature _EMISSION
#pragma shader_feature EFFECT_HUE_VARIATION

#T#Emission0Variables
#ifdef _EMISSION

	#if defined(PROP_EMISSIONMAP) || !defined(OPTIMIZER_ENABLED)
		Texture2D _EmissionMap;
		float4 _EmissionMap_ST;
		float2 _EmissionMapPan;
		float _EmissionMapUV;
	#endif
	#if defined(PROP_EMISSIONMASK) || !defined(OPTIMIZER_ENABLED)
		Texture2D _EmissionMask;
		float4 _EmissionMask_ST;
		float2 _EmissionMaskPan;
		float _EmissionMaskUV;
	#endif
	#if defined(PROP_EMISSIONSCROLLINGCURVE) || !defined(OPTIMIZER_ENABLED)
		Texture2D _EmissionScrollingCurve;
		float4 _EmissionScrollingCurve_ST;
	#endif

	float4 _EmissionColor;
	float _EmissionBaseColorAsMap;
	float _EmissionStrength;
	float _EmissionHueShiftEnabled;
	float _EmissionHueShift;
	float _EmissionHueShiftSpeed;
	float _EmissionCenterOutEnabled;
	float _EmissionCenterOutSpeed;
	float _EnableGITDEmission;
	float _GITDEWorldOrMesh;
	float _GITDEMinEmissionMultiplier;
	float _GITDEMaxEmissionMultiplier;
	float _GITDEMinLight;
	float _GITDEMaxLight;
	float _EmissionBlinkingEnabled;
	float _EmissiveBlink_Min;
	float _EmissiveBlink_Max;
	float _EmissiveBlink_Velocity;
	float _EmissionBlinkingOffset;
	float _ScrollingEmission;
	float4 _EmissiveScroll_Direction;
	float _EmissiveScroll_Width;
	float _EmissiveScroll_Velocity;
	float _EmissiveScroll_Interval;
	float _EmissionScrollingOffset;

	#K#POI_EMISSION0_VARIABLES

	#if defined(PROP_EMISSIONMAP) || !defined(OPTIMIZER_ENABLED)
		Texture2D _EmissionMap1;
		float4 _EmissionMap1_ST;
		float2 _EmissionMap1Pan;
		float _EmissionMap1UV;
	#endif
	#if defined(PROP_EMISSIONMASK) || !defined(OPTIMIZER_ENABLED)
		Texture2D _EmissionMask1;
		float4 _EmissionMask1_ST;
		float2 _EmissionMask1Pan;
		float _EmissionMask1UV;
	#endif
	#if defined(PROP_EMISSIONSCROLLINGCURVE) || !defined(OPTIMIZER_ENABLED)
		Texture2D _EmissionScrollingCurve1;
		float4 _EmissionScrollingCurve1_ST;
	#endif

	float4 _EmissionColor1;
	float _EmissionBaseColorAsMap1;
	float _EmissionStrength1;
	float _EnableEmission1;
	float _EmissionHueShift1;
	float _EmissionHueShiftSpeed1;
	float4 _EmissiveScroll_Direction1;
	float _EmissiveScroll_Width1;
	float _EmissiveScroll_Velocity1;
	float _EmissiveScroll_Interval1;
	float _EmissionBlinkingEnabled1;
	float _EmissiveBlink_Min1;
	float _EmissiveBlink_Max1;
	float _EmissiveBlink_Velocity1;
	float _ScrollingEmission1;
	float _EnableGITDEmission1;
	float _GITDEMinEmissionMultiplier1;
	float _GITDEMaxEmissionMultiplier1;
	float _GITDEMinLight1;
	float _GITDEMaxLight1;
	float _GITDEWorldOrMesh1;
	float _EmissionCenterOutEnabled1;
	float _EmissionCenterOutSpeed1;
	float _EmissionHueShiftEnabled1;
	float _EmissionBlinkingOffset1;
	float _EmissionScrollingOffset1;

	float _EmissionReplace;

	float _EmissionScrollingVertexColor;
	float _EmissionScrollingVertexColor1;

	float _EmissionScrollingUseCurve;
	float _EmissionScrollingUseCurve1;

	#K#POI_EMISSION1_VARIABLES
#endif

#T#Emission0Function
float calculateGlowInTheDark(in float minLight, in float maxLight, in float minEmissionMultiplier, in float maxEmissionMultiplier, in float enabled, in float worldOrMesh, in PoiLight poiLight)
{
	float glowInTheDarkMultiplier = 1;
	UNITY_BRANCH
	if (enabled)
	{
		#ifdef POI_LIGHTING
			float3 lightValue = worldOrMesh ? calculateluminance(poiLight.finalLighting.rgb) : calculateluminance(poiLight.directLighting.rgb);
			float gitdeAlpha = saturate(inverseLerp(minLight, maxLight, lightValue));
			glowInTheDarkMultiplier = lerp(minEmissionMultiplier, maxEmissionMultiplier, gitdeAlpha);
		#endif
	}
	return glowInTheDarkMultiplier;
}

float calculateScrollingEmission(in float3 direction, in float velocity, in float interval, in float scrollWidth, float offset, float3 position)
{
	float phase = 0;
	phase = dot(position, direction);
	phase -= (_Time.y + offset) * velocity;
	phase /= interval;
	phase -= floor(phase);
	phase = saturate(phase);
	return(pow(phase, scrollWidth) + pow(1 - phase, scrollWidth * 4)) * 0.5;
}

float calculateBlinkingEmission(in float blinkMin, in float blinkMax, in float blinkVelocity, float offset)
{
	float amplitude = (blinkMax - blinkMin) * 0.5f;
	float base = blinkMin + amplitude;
	return sin((_Time.y + offset) * blinkVelocity) * amplitude + base;
}

#ifdef _EMISSION
	void applyEmission(inout PoiFragData poiFragData, in PoiMesh poiMesh, in PoiLight poiLight, in PoiCam poiCam, in PoiMods poiMods)
	{


		// First Emission
		float3 emission0 = 0;
		float emissionStrength0 = _EmissionStrength;
		float3 emissionColor0 = 0;
		
		#K#POI_EMISSION0_MODS

		float glowInTheDarkMultiplier0 = calculateGlowInTheDark(_GITDEMinLight, _GITDEMaxLight, _GITDEMinEmissionMultiplier, _GITDEMaxEmissionMultiplier, _EnableGITDEmission, _GITDEWorldOrMesh, poiLight);
		
		#if defined(PROP_EMISSIONMAP) || !defined(OPTIMIZER_ENABLED)
			UNITY_BRANCH
			if (!_EmissionCenterOutEnabled)
			{
				emissionColor0 = POI2D_SAMPLER_PAN(_EmissionMap, _MainTex, poiUV(poiMesh.uv[_EmissionMapUV], _EmissionMap_ST), _EmissionMapPan).rgb * lerp(1, poiFragData.baseColor, _EmissionBaseColorAsMap).rgb * _EmissionColor.rgb;
			}
			else
			{
				emissionColor0 = UNITY_SAMPLE_TEX2D_SAMPLER(_EmissionMap, _MainTex, ((.5 + poiLight.nDotV * .5) * _EmissionMap_ST.xy) + _Time.x * _EmissionCenterOutSpeed).rgb * lerp(1, poiFragData.baseColor, _EmissionBaseColorAsMap).rgb * _EmissionColor.rgb;
			}
		#else
			emissionColor0 = lerp(1, poiFragData.baseColor, _EmissionBaseColorAsMap).rgb * _EmissionColor.rgb;
		#endif
		
		UNITY_BRANCH
		if (_ScrollingEmission)
		{
			float3 pos = poiMesh.localPos;
			UNITY_BRANCH
			if (_EmissionScrollingVertexColor)
			{
				pos = poiMesh.vertexColor.rgb;
			}
			
			UNITY_BRANCH
			if (_EmissionScrollingUseCurve)
			{
				#if defined(PROP_EMISSIONSCROLLINGCURVE) || !defined(OPTIMIZER_ENABLED)
					emissionStrength0 *= UNITY_SAMPLE_TEX2D_SAMPLER(_EmissionScrollingCurve, _MainTex, poiUV(poiMesh.uv[_EmissionMapUV], _EmissionScrollingCurve_ST) + (dot(pos, _EmissiveScroll_Direction.xyz) * _EmissiveScroll_Interval) + _Time.x * _EmissiveScroll_Velocity).r;
				#endif
			}
			else
			{
				emissionStrength0 *= calculateScrollingEmission(_EmissiveScroll_Direction.xyz, _EmissiveScroll_Velocity, _EmissiveScroll_Interval, _EmissiveScroll_Width, _EmissionScrollingOffset, pos);
			}
		}
		
		UNITY_BRANCH
		if (_EmissionBlinkingEnabled)
		{
			emissionStrength0 *= calculateBlinkingEmission(_EmissiveBlink_Min, _EmissiveBlink_Max, _EmissiveBlink_Velocity, _EmissionBlinkingOffset);
		}
		
		emissionColor0 = hueShift(emissionColor0, frac(_EmissionHueShift + _EmissionHueShiftSpeed * _Time.x) * _EmissionHueShiftEnabled);
		
		#if defined(PROP_EMISSIONMASK) || !defined(OPTIMIZER_ENABLED)
			float emissionMask0 = UNITY_SAMPLE_TEX2D_SAMPLER(_EmissionMask, _MainTex, poiUV(poiMesh.uv[_EmissionMaskUV], _EmissionMask_ST) + _Time.x * _EmissionMaskPan).r;
		#else
			float emissionMask0 = 1;
		#endif
		
		#ifdef POI_BLACKLIGHT
			if (_BlackLightMaskEmission != 4)
			{
				emissionMask0 *= blackLightMask[_BlackLightMaskEmission];
			}
		#endif
		
		emissionStrength0 *= glowInTheDarkMultiplier0 * emissionMask0;
		emission0 = emissionStrength0 * emissionColor0;
		
		#ifdef POI_DISSOLVE
			UNITY_BRANCH
			if (_DissolveEmissionSide != 2)
			{
				emission0 *= lerp(1 - dissolveAlpha, dissolveAlpha, _DissolveEmissionSide);
			}
		#endif
		
		// Second Emission
		float3 emission1 = 0;
		float emissionStrength1 = 0;
		float3 emissionColor1 = 0;
		

		#ifdef EFFECT_HUE_VARIATION
			emissionStrength1 = _EmissionStrength1;
			#K#POI_EMISSION1_MODS

			float glowInTheDarkMultiplier1 = calculateGlowInTheDark(_GITDEMinLight1, _GITDEMaxLight1, _GITDEMinEmissionMultiplier1, _GITDEMaxEmissionMultiplier1, _EnableGITDEmission1, _GITDEWorldOrMesh1, poiLight);
			#if defined(PROP_EMISSIONMAP1) || !defined(OPTIMIZER_ENABLED)
				
				UNITY_BRANCH
				if (!_EmissionCenterOutEnabled1)
				{
					emissionColor1 = POI2D_SAMPLER_PAN(_EmissionMap1, _MainTex, poiUV(poiMesh.uv[_EmissionMap1UV], _EmissionMap1_ST), _EmissionMap1Pan) * lerp(1, poiFragData.baseColor, _EmissionBaseColorAsMap1).rgb * _EmissionColor1.rgb;
				}
				else
				{
					emissionColor1 = UNITY_SAMPLE_TEX2D_SAMPLER(_EmissionMap1, _MainTex, ((.5 + poiLight.nDotV * .5) * _EmissionMap1_ST.xy) + _Time.x * _EmissionCenterOutSpeed1).rgb * lerp(1, poiFragData.baseColor, _EmissionBaseColorAsMap1).rgb * _EmissionColor1.rgb;
				}
			#else
				emissionColor1 = lerp(1, poiFragData.baseColor, _EmissionBaseColorAsMap1).rgb * _EmissionColor1.rgb;;
			#endif
			UNITY_BRANCH
			if (_ScrollingEmission1)
			{
				float3 pos1 = poiMesh.localPos;
				UNITY_BRANCH
				if (_EmissionScrollingVertexColor1)
				{
					pos1 = poiMesh.vertexColor.rgb;
				}
				
				UNITY_BRANCH
				if (_EmissionScrollingUseCurve1)
				{
					#if defined(PROP_EMISSIONSCROLLINGCURVE1) || !defined(OPTIMIZER_ENABLED)
						emissionStrength1 *= UNITY_SAMPLE_TEX2D_SAMPLER(_EmissionScrollingCurve1, _MainTex, poiUV(poiMesh.uv[_EmissionMap1UV], _EmissionScrollingCurve1_ST) + (dot(pos1, _EmissiveScroll_Direction1) * _EmissiveScroll_Interval1) + _Time.x * _EmissiveScroll_Velocity1);
					#endif
				}
				else
				{
					emissionStrength1 *= calculateScrollingEmission(_EmissiveScroll_Direction1, _EmissiveScroll_Velocity1, _EmissiveScroll_Interval1, _EmissiveScroll_Width1, _EmissionScrollingOffset1, pos1);
				}
			}
			UNITY_BRANCH
			if (_EmissionBlinkingEnabled1)
			{
				emissionStrength1 *= calculateBlinkingEmission(_EmissiveBlink_Min1, _EmissiveBlink_Max1, _EmissiveBlink_Velocity1, _EmissionBlinkingOffset1);
			}
			
			emissionColor1 = hueShift(emissionColor1, frac(_EmissionHueShift1 + _EmissionHueShiftSpeed1 * _Time.x) * _EmissionHueShiftEnabled1);
			#if defined(PROP_EMISSIONMASK1) || !defined(OPTIMIZER_ENABLED)
				float emissionMask1 = UNITY_SAMPLE_TEX2D_SAMPLER(_EmissionMask1, _MainTex, poiUV(poiMesh.uv[_EmissionMask1UV], _EmissionMask1_ST) + _Time.x * _EmissionMask1Pan);
			#else
				float emissionMask1 = 1;
			#endif
			
			#ifdef POI_BLACKLIGHT
				if (_BlackLightMaskEmission2 != 4)
				{
					emissionMask1 *= blackLightMask[_BlackLightMaskEmission2];
				}
			#endif
			emissionStrength1 *= glowInTheDarkMultiplier1 * emissionMask1;
			emission1 = emissionStrength1 * emissionColor1;

		#endif
		poiFragData.finalColor.rgb = lerp(poiFragData.finalColor.rgb, saturate(emission0 + emission1),  _EmissionReplace * poiMax(emission0 + emission1));

		poiFragData.emission = emission0 + emission1;
	}
#endif

#T#Emission0FunctionCall
#ifdef _EMISSION
	applyEmission(poiFragData, poiMesh, poiLight, poiCam, poiMods);
#endif
