
#T#PoiMainProperties
//Main-main
_Color ("Color & Alpha", Color) = (1, 1, 1, 1)
_MainTex ("Texture--{reference_properties:[_MainTexPan, _MainTexUV]}", 2D) = "white" { }
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, Wolrd Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _MainTexUV ("UV", Int) = 0
[HideInInspector][Vector2]_MainTexPan ("Panning", Vector) = (0, 0, 0, 0)
[Normal]_BumpMap ("Normal Map--{reference_properties:[_BumpMapPan, _BumpMapUV, _BumpScale]}", 2D) = "bump" { }
[HideInInspector][Vector2]_BumpMapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, Wolrd Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _BumpMapUV ("UV", Int) = 0
[HideInInspector]_BumpScale ("Intensity", Range(0, 10)) = 1
_ClippingMask ("Alpha Map--{reference_properties:[_ClippingMaskPan, _ClippingMaskUV, _Inverse_Clipping]}", 2D) = "white" { }
[HideInInspector][Vector2]_ClippingMaskPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, Wolrd Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _ClippingMaskUV ("UV", Int) = 0
[HideInInspector][ToggleUI]_Inverse_Clipping ("Invert", Float) = 0
_Cutoff ("Alpha Cuttoff--{condition_showS:(_Mode==1)}", Range(0, 1.001)) = 0.5

#T#PoiMainVariabls
float4 _Color;
UNITY_DECLARE_TEX2D(_MainTex); 
float4 _MainTex_ST;
float2 _MainTexPan;
float _MainTexUV;
Texture2D _BumpMap; 
float4 _BumpMap_ST; 
float2 _BumpMapPan; 
float _BumpMapUV;
float _BumpScale;
Texture2D _ClippingMask; 
float4 _ClippingMask_ST; 
float2 _ClippingMaskPan; 
float _ClippingMaskUV;
float _Inverse_Clipping;
float _Cutoff;

#T#PoiMainImplementation
poiFragData.baseColor = mainTexture.rgb * _Color.rgb;
poiFragData.alpha = mainTexture.a * _Color.a;

#if defined(PROP_CLIPPINGMASK) || !defined(OPTIMIZER_ENABLED)
	float alphaMask = POI2D_SAMPLER_PAN(_ClippingMask, _MainTex, poiUV(poiMesh.uv[_ClippingMaskUV], _ClippingMask_ST), _ClippingMaskPan).r;
#else
	float alphaMask = 1;
#endif

poiFragData.alpha *= alphaMask;

#T#PoiMainNormalImplementation
float3 mainNormal = UnpackScaleNormal(POI2D_SAMPLER_PAN(_BumpMap, _MainTex, poiUV(poiMesh.uv[_BumpMapUV], _BumpMap_ST), _BumpMapPan), _BumpScale);
poiMesh.tangentSpaceNormal = mainNormal;

poiMesh.normals[1] = normalize(
	poiMesh.tangentSpaceNormal.x * poiMesh.tangent.xyz +
	poiMesh.tangentSpaceNormal.y * poiMesh.binormal +
	poiMesh.tangentSpaceNormal.z * poiMesh.normals[0]
);

