#T#PoiAudioLinkProperties
// Audio link
[HideInInspector] m_start_audioLink ("Audio Link--{reference_property:_EnableAudioLink}", Float) = 0
[HideInInspector][ThryToggle(COLOR_GRADING_LOG_VIEW)] _EnableAudioLink ("Enabled?", Float) = 0
[Helpbox(1)] _AudioLinkHelp ("This section houses the global controls for audio link. Controls for individual features are in their respective sections. (Emission, Dissolve, etc...)", Int) = 0
[ToggleUI] _AudioLinkAnimToggle ("Anim Toggle", Float) = 1
_AudioLinkDelay ("Delay", Range(0, 1)) = 0
//[ToggleUI]_AudioLinkAveraging ("Enable averaging", Float) = 0
//_AudioLinkAverageRange ("Average Sampling Range", Range(0, 1)) = .5
[HideInInspector] m_end_audioLink ("Audio Link", Float) = 0

#T#PoiAudioLinkKeywords
#pragma shader_feature COLOR_GRADING_LOG_VIEW

#T#PoiAudioLinkMacrosAndDefines
// Map of where features in AudioLink are.
#define ALPASS_DFT                      int2(0, 4)
#define ALPASS_WAVEFORM                 int2(0, 6)
#define ALPASS_AUDIOLINK                int2(0, 0)
#define ALPASS_AUDIOBASS                int2(0, 0)
#define ALPASS_AUDIOLOWMIDS             int2(0, 1)
#define ALPASS_AUDIOHIGHMIDS            int2(0, 2)
#define ALPASS_AUDIOTREBLE              int2(0, 3)
#define ALPASS_AUDIOLINKHISTORY         int2(1, 0)
#define ALPASS_GENERALVU                int2(0, 22)
#define ALPASS_GENERALVU_INSTANCE_TIME  int2(2, 22)
#define ALPASS_GENERALVU_LOCAL_TIME     int2(3, 22)
#define ALPASS_GENERALVU_NETWORK_TIME   int2(4, 22)
#define ALPASS_GENERALVU_PLAYERINFO     int2(6, 22)
#define ALPASS_CCINTERNAL               int2(12, 22)
#define ALPASS_CCSTRIP                  int2(0, 24)
#define ALPASS_CCLIGHTS                 int2(0, 25)
#define ALPASS_AUTOCORRELATOR           int2(0, 27)
#define ALPASS_FILTEREDAUDIOLINK        int2(0, 28)

// Some basic constants to use (Note, these should be compatible with
// future version of AudioLink, but may change.
#define AUDIOLINK_SAMPHIST              3069        // Internal use for algos, do not change.
#define AUDIOLINK_SAMPLEDATA24          2046
#define AUDIOLINK_EXPBINS               24
#define AUDIOLINK_EXPOCT                10
#define AUDIOLINK_ETOTALBINS (AUDIOLINK_EXPBINS * AUDIOLINK_EXPOCT)
#define AUDIOLINK_WIDTH                 128
#define AUDIOLINK_SPS                   48000       // Samples per second
#define AUDIOLINK_ROOTNOTE              0
#define AUDIOLINK_4BAND_FREQFLOOR       0.123
#define AUDIOLINK_4BAND_FREQCEILING     1
#define AUDIOLINK_BOTTOM_FREQUENCY      13.75
#define AUDIOLINK_BASE_AMPLITUDE        2.5
#define AUDIOLINK_DELAY_COEFFICIENT_MIN 0.3
#define AUDIOLINK_DELAY_COEFFICIENT_MAX 0.9
#define AUDIOLINK_DFT_Q                 4.0
#define AUDIOLINK_TREBLE_CORRECTION     5.0

// ColorChord constants
#define COLORCHORD_EMAXBIN              192
#define COLORCHORD_IIR_DECAY_1          0.90
#define COLORCHORD_IIR_DECAY_2          0.85
#define COLORCHORD_CONSTANT_DECAY_1     0.01
#define COLORCHORD_CONSTANT_DECAY_2     0.0
#define COLORCHORD_NOTE_CLOSEST         3.0
#define COLORCHORD_NEW_NOTE_GAIN        8.0
#define COLORCHORD_MAX_NOTES            10

// We use glsl_mod for most calculations because it behaves better
// on negative numbers, and in some situations actually outperforms
// HLSL's modf().
#ifndef glsl_mod
    #define glsl_mod(x, y) (((x) - (y) * floor((x) / (y))))
#endif

uniform float4               _AudioTexture_TexelSize;

#ifdef SHADER_TARGET_SURFACE_ANALYSIS
    #define AUDIOLINK_STANDARD_INDEXING
#endif

// Mechanism to index into texture.
#ifdef AUDIOLINK_STANDARD_INDEXING
    sampler2D _AudioTexture;
    #define AudioLinkData(xycoord) tex2Dlod(_AudioTexture, float4(uint2(xycoord) * _AudioTexture_TexelSize.xy, 0, 0))
#else
    uniform Texture2D<float4> _AudioTexture;
    SamplerState sampler_AudioTexture;
    #define AudioLinkData(xycoord) _AudioTexture[uint2(xycoord)]
#endif

#T#PoiAudioLinkVariables
#ifdef COLOR_GRADING_LOG_VIEW
    float _AudioLinkDelay;
    float _AudioLinkAnimToggle;
#endif

#T#PoiAudioLinkFunctions
#ifdef COLOR_GRADING_LOG_VIEW
    //Tests to see if Audio Link texture is available
    bool AudioLinkIsAvailable()
    {
        #if !defined(AUDIOLINK_STANDARD_INDEXING)
            int width, height;
            _AudioTexture.GetDimensions(width, height);
            return width > 16;
        #else
            return _AudioTexture_TexelSize.z > 16;
        #endif
    }

    //Get version of audiolink present in the world, 0 if no audiolink is present
    float AudioLinkGetVersion()
    {
        int2 dims;
        #if !defined(AUDIOLINK_STANDARD_INDEXING)
            _AudioTexture.GetDimensions(dims.x, dims.y);
        #else
            dims = _AudioTexture_TexelSize.zw;
        #endif

        if (dims.x >= 128)
            return AudioLinkData(ALPASS_GENERALVU).x;
        else if (dims.x > 16)
            return 1;
        else
            return 0;
    }

    float getBandAtTime(float band, float time, float width, float size = 1.0f)
    {
        return pow(UNITY_SAMPLE_TEX2D(_AudioTexture, float2(time * width, band)).r, (1 - size) * 3 + 1);
    }

    void initAudioBands(inout PoiMods poiMods)
    {
        poiMods.audioLinkAvailable = AudioLinkIsAvailable();
        poiMods.audioLinkAvailable *= _AudioLinkAnimToggle;
        
        if (poiMods.audioLinkAvailable)
        {
            poiMods.audioLinkVersion = AudioLinkGetVersion();
            poiMods.audioLink.x = AudioLinkData(ALPASS_AUDIOBASS).r;
            poiMods.audioLink.y = AudioLinkData(ALPASS_AUDIOLOWMIDS).r;
            poiMods.audioLink.z = AudioLinkData(ALPASS_AUDIOHIGHMIDS).r;
            poiMods.audioLink.w = AudioLinkData(ALPASS_AUDIOTREBLE).r;
        }
    }
#endif

#T#PoiAudioLinkFunctionCalls
#ifdef COLOR_GRADING_LOG_VIEW
    initAudioBands(poiMods);
#endif

#T#PoiAudioLinkEmission0Properties
[Space(10)]
[ThryToggleUI(true)] _AudioLinkEmission0Enabled ("<size=13><b>  Audio Link</b></size>--{ condition_showS:_EnableAudioLink==1}", Float) = 0
[Vector2]_AudioLinkEmission0StrengthMod ("Emission Strength Add--{ condition_showS:(_AudioLinkEmission0Enabled==1 && _EnableAudioLink==1)}", Vector) = (0, 0, 0, 0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkEmission0StrengthBand ("Emission Add Band--{ condition_showS:(_AudioLinkEmission0Enabled==1 && _EnableAudioLink==1)}", Int) = 0
[Vector2] _AudioLinkEmission0CenterOut ("Center Out--{ condition_showS:(_AudioLinkEmission0Enabled==1 && _EnableAudioLink==1)}", Vector) = (0, 0, 0, 0)
_AudioLinkEmission0CenterOutwidth ("Center Out Duration--{ condition_showS:(_AudioLinkEmission0Enabled==1 && _EnableAudioLink==1)}", Range(0, 1)) = 1
_AudioLinkEmission0CenterOutSize ("Wave Size--{ condition_showS:(_AudioLinkEmission0Enabled==1 && _EnableAudioLink==1)}", Range(0, 1)) = 1
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkEmission0CenterOutBand ("Center Out Band--{ condition_showS:(_AudioLinkEmission0Enabled==1 && _EnableAudioLink==1)}", Int) = 0

#T#PoiAudioLinkEmission0Variables
float _AudioLinkEmission0Enabled;
float2 _AudioLinkEmission0StrengthMod;
float _AudioLinkEmission0StrengthBand;
float2 _AudioLinkEmission0CenterOut;
float _AudioLinkEmission0CenterOutwidth;
float _AudioLinkEmission0CenterOutSize;
float _AudioLinkEmission0CenterOutBand;

#T#PoiAudioLinkEmission0Mods
#ifdef COLOR_GRADING_LOG_VIEW
    if (poiMods.audioLinkAvailable && _AudioLinkEmission0Enabled)
    {
        emissionStrength0 += lerp(_AudioLinkEmission0CenterOut.x, _AudioLinkEmission0CenterOut.y, getBandAtTime(_AudioLinkEmission0CenterOutBand, saturate(1 - poiLight.nDotV), _AudioLinkEmission0CenterOutwidth, _AudioLinkEmission0CenterOutSize));
        emissionStrength0 += lerp(_AudioLinkEmission0StrengthMod.x, _AudioLinkEmission0StrengthMod.y, poiMods.audioLink[_AudioLinkEmission0StrengthBand]);
    }
#endif


#T#PoiAudioLinkEmission1Properties
[Space(10)]
[ThryToggleUI(true)] _AudioLinkEmission1Enabled ("<size=13><b>  Audio Link</b></size>--{ condition_showS:_EnableAudioLink==1}", Float) = 0
[Vector2]_AudioLinkEmission1StrengthMod ("Emission Strength Add--{ condition_showS:(_AudioLinkEmission1Enabled==1 && _EnableAudioLink==1)}", Vector) = (0, 0, 0, 0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkEmission1StrengthBand ("Emission Add Band--{ condition_showS:(_AudioLinkEmission1Enabled==1 && _EnableAudioLink==1)}", Int) = 0
[Vector2] _AudioLinkEmission1CenterOut ("Center Out--{ condition_showS:(_AudioLinkEmission1Enabled==1 && _EnableAudioLink==1)}", Vector) = (0, 0, 0, 0)
_AudioLinkEmission1CenterOutwidth ("Center Out Duration--{ condition_showS:(_AudioLinkEmission1Enabled==1 && _EnableAudioLink==1)}", Range(0, 1)) = 1
_AudioLinkEmission1CenterOutSize ("Wave Size--{ condition_showS:(_AudioLinkEmission1Enabled==1 && _EnableAudioLink==1)}", Range(0, 1)) = 1
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkEmission1CenterOutBand ("Center Out Band--{ condition_showS:(_AudioLinkEmission1Enabled==1 && _EnableAudioLink==1)}", Int) = 0

#T#PoiAudioLinkEmission1Variables
float _AudioLinkEmission1Enabled;
float2 _AudioLinkEmission1StrengthMod;
float _AudioLinkEmission1StrengthBand;
float2 _AudioLinkEmission1CenterOut;
float _AudioLinkEmission1CenterOutwidth;
float _AudioLinkEmission1CenterOutSize;
float _AudioLinkEmission1CenterOutBand;

#T#PoiAudioLinkEmission1Mods
#ifdef COLOR_GRADING_LOG_VIEW
    if (poiMods.audioLinkAvailable && _AudioLinkEmission1Enabled)
    {
        emissionStrength1 += lerp(_AudioLinkEmission1CenterOut.x, _AudioLinkEmission1CenterOut.y, getBandAtTime(_AudioLinkEmission1CenterOutBand, saturate(1 - poiLight.nDotV), _AudioLinkEmission1CenterOutwidth, _AudioLinkEmission0CenterOutSize));
        emissionStrength1 += lerp(_AudioLinkEmission1StrengthMod.x, _AudioLinkEmission1StrengthMod.y, poiMods.audioLink[_AudioLinkEmission1StrengthBand]);
    }
#endif