#T#PoiMatcapProperties
// First Matcap
[HideInInspector] m_start_matcap ("Matcap / Sphere Textures--{reference_property:_MatcapEnable}", Float) = 0
[HideInInspector][ThryToggle(_COLORADDSUBDIFF_ON)]_MatcapEnable ("Enable Matcap", Float) = 0
_MatcapColor ("Color", Color) = (1, 1, 1, 1)
[TextureNoSO]_Matcap ("Matcap", 2D) = "white" { }
_MatcapBorder ("Border", Range(0, .5)) = 0.43
_MatcapMask ("Mask--{reference_properties:[_MatcapMaskPan, _MatcapMaskUV, _MatcapMaskInvert]}", 2D) = "white" { }
[HideInInspector][Vector2]_MatcapMaskPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, Wolrd Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _MatcapMaskUV ("UV", Int) = 0
[HideInInspector][ToggleUI]_MatcapMaskInvert ("Invert", Float) = 0
_MatcapEmissionStrength ("Emission Strength", Range(0, 20)) = 0
_MatcapIntensity ("Intensity", Range(0, 5)) = 1
_MatcapLightMask ("Hide in Shadow", Range(0, 1)) = 0
_MatcapReplace ("Replace With Matcap", Range(0, 1)) = 1
_MatcapMultiply ("Multiply Matcap", Range(0, 1)) = 0
_MatcapAdd ("Add Matcap", Range(0, 1)) = 0
[Enum(Vertex, 0, Pixel, 1)] _MatcapNormal ("Normal to use", Int) = 1

[Space(10)]
[ThryHeaderLabel(Custom Normal, 13)]
[Space(4)]
[ThryToggle(POI_MATCAP0_CUSTOM_NORMAL)]_Matcap0CustomNormal ("Custom Normal", Float) = 0
[Normal]_Matcap0NormalMap ("Normal Map--{reference_properties:[_Matcap0NormalMapPan, _Matcap0NormalMapUV, _Matcap0NormalMapScale]}", 2D) = "bump" { }
[HideInInspector][Vector2]_Matcap0NormalMapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, Wolrd Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _Matcap0NormalMapUV ("UV", Int) = 0
[HideInInspector]_Matcap0NormalMapScale ("Intensity", Range(0, 10)) = 1

[Space(10)]
[ThryHeaderLabel(Hue Shift, 13)]
[Space(4)]
[ToggleUI]_MatcapHueShiftEnabled ("Enabled", Float) = 0
_MatcapHueShiftSpeed ("Shift Speed", Float) = 0
_MatcapHueShift ("Hue Shift", Range(0, 1)) = 0
[HideInInspector] m_end_matcap ("Matcap", Float) = 0

// Second Matcap
[HideInInspector] m_start_Matcap2 ("Matcap 2--{reference_property:_Matcap2Enable}", Float) = 0
[ThryToggle(COLOR_GRADING_HDR_3D)]_Matcap2Enable ("Enable Matcap 2", Float) = 0
_Matcap2Color ("Color", Color) = (1, 1, 1, 1)
[TextureNoSO]_Matcap2 ("Matcap", 2D) = "white" { }
_Matcap2Border ("Border", Range(0, .5)) = 0.43
_Matcap2Mask ("Mask--{reference_properties:[_Matcap2MaskPan, _Matcap2MaskUV, _Matcap2MaskInvert]}", 2D) = "white" { }
[HideInInspector][Vector2]_Matcap2MaskPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, Wolrd Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _Matcap2MaskUV ("UV", Int) = 0
[HideInInspector][ToggleUI]_Matcap2MaskInvert ("Invert", Float) = 0
_Matcap2EmissionStrength ("Emission Strength", Range(0, 20)) = 0
_Matcap2Intensity ("Intensity", Range(0, 5)) = 1
_Matcap2LightMask ("Hide in Shadow", Range(0, 1)) = 0
_Matcap2Replace ("Replace With Matcap", Range(0, 1)) = 0
_Matcap2Multiply ("Multiply Matcap", Range(0, 1)) = 0
_Matcap2Add ("Add Matcap", Range(0, 1)) = 0
[Enum(Vertex, 0, Pixel, 1)] _Matcap2Normal ("Normal to use", Int) = 1

[Space(10)]
[ThryHeaderLabel(Custom Normal, 13)]
[Space(4)]
[ThryToggle(POI_MATCAP1_CUSTOM_NORMAL)]_Matcap1CustomNormal ("Custom Normal", Float) = 0
[Normal]_Matcap1NormalMap ("Normal Map--{reference_properties:[_Matcap1NormalMapPan, _Matcap1NormalMapUV, _Matcap1NormalMapScale]}", 2D) = "bump" { }
[HideInInspector][Vector2]_Matcap1NormalMapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, Wolrd Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _Matcap1NormalMapUV ("UV", Int) = 0
[HideInInspector]_Matcap1NormalMapScale ("Intensity", Range(0, 10)) = 1

[Space(10)]
[ThryHeaderLabel(Hue Shift, 13)]
[Space(4)]
[ToggleUI]_Matcap2HueShiftEnabled ("Enabled", Float) = 0
_Matcap2HueShiftSpeed ("Shift Speed", Float) = 0
_Matcap2HueShift ("Hue Shift", Range(0, 1)) = 0
[HideInInspector] m_end_Matcap2 ("Matcap 2", Float) = 0

#T#PoiMatcapKeywords
#pragma shader_feature _COLORADDSUBDIFF_ON
#pragma shader_feature COLOR_GRADING_HDR_3D
#pragma shader_feature_local POI_MATCAP0_CUSTOM_NORMAL
#pragma shader_feature_local POI_MATCAP1_CUSTOM_NORMAL

#T#PoiMatcapVariables

#ifdef _COLORADDSUBDIFF_ON
    #if defined(PROP_MATCAP) || !defined(OPTIMIZER_ENABLED)
        Texture2D _Matcap;
        float4 _Matcap_ST;
        float2 _MatcapPan;
        float _MatcapUV;
    #endif
    #if defined(PROP_MATCAPMASK) || !defined(OPTIMIZER_ENABLED)
        Texture2D _MatcapMask;
        float4 _MatcapMask_ST;
        float2 _MatcapMaskPan;
        float _MatcapMaskUV;
    #endif
    #ifdef POI_MATCAP0_CUSTOM_NORMAL
        #if defined(PROP_MATCAP0NORMALMAP) || !defined(OPTIMIZER_ENABLED)
            Texture2D _Matcap0NormalMap;
            float4 _Matcap0NormalMap_ST;
            float2 _Matcap0NormalMapPan;
            float _Matcap0NormalMapUV;
        #endif
        float _Matcap0NormalMapScale;
    #endif
    float _MatcapMaskInvert;
    float _MatcapBorder;
    float4 _MatcapColor;
    float _MatcapIntensity;
    float _MatcapReplace;
    float _MatcapMultiply;
    float _MatcapAdd;
    float _MatcapEnable;
    float _MatcapLightMask;
    float _MatcapEmissionStrength;
    float _MatcapNormal;
    float _MatcapHueShiftEnabled;
    float _MatcapHueShiftSpeed;
    float _MatcapHueShift;
#endif

#ifdef COLOR_GRADING_HDR_3D
    #if defined(PROP_MATCAP2) || !defined(OPTIMIZER_ENABLED)
        Texture2D _Matcap2;
        float4 _Matcap2_ST;
        float2 _Matcap2Pan;
        float _Matcap2UV;
    #endif
    #if defined(PROP_MATCAP2MASK) || !defined(OPTIMIZER_ENABLED)
        Texture2D _Matcap2Mask;
        float4 _Matcap2Mask_ST;
        float2 _Matcap2MaskPan;
        float _Matcap2MaskUV;
    #endif
    #ifdef POI_MATCAP1_CUSTOM_NORMAL
        #if defined(PROP_MATCAP1NORMALMAP) || !defined(OPTIMIZER_ENABLED)
            Texture2D _Matcap1NormalMap;
            float4 _Matcap1NormalMap_ST;
            float2 _Matcap1NormalMapPan;
            float _Matcap1NormalMapUV;
        #endif
        float _Matcap1NormalMapScale;
    #endif
    float _Matcap2MaskInvert;
    float _Matcap2Border;
    float4 _Matcap2Color;
    float _Matcap2Intensity;
    float _Matcap2Replace;
    float _Matcap2Multiply;
    float _Matcap2Add;
    float _Matcap2Enable;
    float _Matcap2LightMask;
    float _Matcap2EmissionStrength;
    float _Matcap2Normal;
    float _Matcap2HueShiftEnabled;
    float _Matcap2HueShiftSpeed;
    float _Matcap2HueShift;
#endif

#T#PoiMatcapFunctions
void blendMatcap(in PoiLight poiLight, inout PoiFragData poiFragData, float add, float multiply, float replace, float4 matcapColor, float matcapMask, float emissionStrength, float matcapLightMask
#ifdef POI_BLACKLIGHT
    , uint blackLightMaskIndex
#endif
)
{
    if (matcapLightMask)
    {
        matcapMask *= lerp(1, poiLight.rampedLightMap, matcapLightMask);
    }
    #ifdef POI_BLACKLIGHT
        if (blackLightMaskIndex != 4)
        {
            matcapMask *= blackLightMask[blackLightMaskIndex];
        }
    #endif
    
    poiFragData.baseColor.rgb = lerp(poiFragData.baseColor.rgb, matcapColor.rgb, replace * matcapMask * matcapColor.a * .999999);
    poiFragData.baseColor.rgb *= lerp(1, matcapColor.rgb, multiply * matcapMask * matcapColor.a);
    poiFragData.baseColor.rgb += matcapColor.rgb * add * matcapMask * matcapColor.a;
    poiFragData.emission += matcapColor.rgb * emissionStrength * matcapMask * matcapColor.a;
}

#if defined(_COLORADDSUBDIFF_ON) || defined(COLOR_GRADING_HDR_3D)
    void applyMatcap(inout PoiFragData poiFragData, in PoiCam poiCam, in PoiMesh poiMesh, in PoiLight poiLight)
    {
        float4 matcap = 0;
        float matcapMask = 0;
        float4 matcap2 = 0;
        float matcap2Mask = 0;
        
        // Both matcaps use the same coordinates
        half3 worldViewUp = normalize(half3(0, 1, 0) - poiCam.viewDir * dot(poiCam.viewDir, half3(0, 1, 0)));
        half3 worldViewRight = normalize(cross(poiCam.viewDir, worldViewUp));
        
        // Matcap 1
        #ifdef _COLORADDSUBDIFF_ON

            #ifdef POI_MATCAP0_CUSTOM_NORMAL
                float3 normal0 = calculateNormal(poiMesh.normals[_MatcapNormal], poiMesh, _Matcap0NormalMap, _Matcap0NormalMap_ST, _Matcap0NormalMapPan, _Matcap0NormalMapUV, _Matcap0NormalMapScale);
            #else
                float3 normal0 = poiMesh.normals[_MatcapNormal];
            #endif

            half2 matcapUV = half2(dot(worldViewRight, normal0), dot(worldViewUp, poiMesh.normals[_MatcapNormal])) * _MatcapBorder + 0.5;
            
            #if defined(PROP_MATCAP) || !defined(OPTIMIZER_ENABLED)
                matcap = UNITY_SAMPLE_TEX2D_SAMPLER(_Matcap, _MainTex, TRANSFORM_TEX(matcapUV, _Matcap)) * _MatcapColor;
            #else
                matcap = _MatcapColor;
            #endif

            matcap.rgb *= _MatcapIntensity;
            #if defined(PROP_MATCAPMASK) || !defined(OPTIMIZER_ENABLED)
                matcapMask = POI2D_SAMPLER_PAN(_MatcapMask, _MainTex, poiUV(poiMesh.uv[_MatcapMaskUV], _MatcapMask_ST), _MatcapMaskPan);
            #else
                matcapMask = 1;
            #endif
            
            if (_MatcapMaskInvert)
            {
                matcapMask = 1 - matcapMask;
            }
            
            UNITY_BRANCH
            if (_MatcapHueShiftEnabled)
            {
                matcap.rgb = hueShift(matcap.rgb, _MatcapHueShift + _Time.x * _MatcapHueShiftSpeed);
            }
            
            blendMatcap(poiLight, poiFragData, _MatcapAdd, _MatcapMultiply, _MatcapReplace, matcap, matcapMask, _MatcapEmissionStrength, _MatcapLightMask
            #ifdef POI_BLACKLIGHT
                , _BlackLightMaskMatcap
            #endif
            );
        #endif
        
        // Matcap 2
        #ifdef COLOR_GRADING_HDR_3D

            #ifdef POI_MATCAP1_CUSTOM_NORMAL
                float3 normal1 = calculateNormal(poiMesh.normals[_Matcap2Normal], poiMesh, _Matcap1NormalMap, _Matcap1NormalMap_ST, _Matcap1NormalMapPan, _Matcap1NormalMapUV, _Matcap1NormalMapScale);
            #else
                float3 normal1 = poiMesh.normals[_Matcap2Normal];
            #endif

            half2 matcapUV2 = half2(dot(worldViewRight, normal1), dot(worldViewUp, poiMesh.normals[_Matcap2Normal])) * _Matcap2Border + 0.5;
            #if defined(PROP_MATCAP2) || !defined(OPTIMIZER_ENABLED)
                matcap2 = UNITY_SAMPLE_TEX2D_SAMPLER(_Matcap2, _MainTex, TRANSFORM_TEX(matcapUV2, _Matcap2)) * _Matcap2Color;
            #else
                matcap2 = _Matcap2Color;
            #endif
            matcap2.rgb *= _Matcap2Intensity;
            #if defined(PROP_MATCAP2MASK) || !defined(OPTIMIZER_ENABLED)
                matcap2Mask = POI2D_SAMPLER_PAN(_Matcap2Mask, _MainTex, poiUV(poiMesh.uv[_Matcap2MaskUV], _Matcap2Mask_ST), _Matcap2MaskPan);
            #else
                matcap2Mask = 1;
            #endif
            if (_Matcap2MaskInvert)
            {
                matcap2Mask = 1 - matcap2Mask;
            }
            
            UNITY_BRANCH
            if (_Matcap2HueShiftEnabled)
            {
                matcap2.rgb = hueShift(matcap2.rgb, _Matcap2HueShift + _Time.x * _Matcap2HueShiftSpeed);
            }
            
            blendMatcap(poiLight, poiFragData, _Matcap2Add, _Matcap2Multiply, _Matcap2Replace, matcap2, matcap2Mask, _Matcap2EmissionStrength, _Matcap2LightMask
            #ifdef POI_BLACKLIGHT
                , _BlackLightMaskMatcap2
            #endif
            );
        #endif
    }
#endif

#T#PoiMatcapFunctionCalls
#if defined(_COLORADDSUBDIFF_ON) || defined(COLOR_GRADING_HDR_3D)
    applyMatcap(poiFragData, poiCam, poiMesh, poiLight);
#endif
